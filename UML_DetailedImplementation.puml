@startuml DetailedClassDiagram_Implementation
!theme plain

' Comprehensive UML 2.5 Class Diagram with Implementation Details
' Reference: https://www.uml-diagrams.org/uml-25-diagrams.html

skinparam class {
    BackgroundColor White
    BorderColor Black
    FontStyle bold
}

skinparam interface {
    BackgroundColor LightBlue
    BorderColor Black
    FontStyle bold
}

title "Media Player Adapter Pattern - Detailed Implementation"

' === PRODUCTION CLASSES ===

interface IMediaPlayer <<interface>> {
    {abstract} +Play(fileName: string): void
}

class MediaPlayerAdapter <<concrete>> {
    ' Attributes (UML 2.5 visibility and properties)
    -_legacyPlayer: LegacyMediaPlayer {readonly}
    
    ' Constructor with constraints
    +MediaPlayerAdapter(legacyPlayer: LegacyMediaPlayer)
    {pre: legacyPlayer != null}
    
    ' Public operations
    +Play(fileName: string): void
    {pre: fileName != null && !string.IsNullOrWhiteSpace(fileName)}
    {post: _legacyPlayer.PlayFile(fileName) called}
    
    ' Private validation operations
    -ValidateParameter(parameter: object, parameterName: string): void
    -ValidateStringParameter(value: string, parameterName: string): void
}

class LegacyMediaPlayer <<concrete>> {
    ' Virtual method for extensibility
    +PlayFile(filePath: string): void {virtual}
    {post: Console output generated}
}

' === TEST INFRASTRUCTURE ===

class MediaPlayerTests <<TestClass>> {
    ' Test operations with MSTest attributes
    +MediaPlayerAdapter_ImplementsIMediaPlayer(): void <<TestMethod>>
    +MediaPlayerAdapter_ThrowsArgumentNullException_WhenLegacyPlayerIsNull(): void <<TestMethod>>
    +MediaPlayerAdapter_Play_CallsLegacyPlayFile(): void <<TestMethod>>
    +MediaPlayerAdapter_Play_ThrowsArgumentNullException_WhenFileNameIsNull(): void <<TestMethod>>
    +MediaPlayerAdapter_Play_ThrowsArgumentException_WhenFileNameIsEmpty(): void <<TestMethod>>
    +LegacyMediaPlayer_PlayFile_AcceptsFileName(): void <<TestMethod>>
    
    ' Helper methods
    -CreateLegacyPlayer(): LegacyMediaPlayer
    -CreateAdapter(player: LegacyMediaPlayer): MediaPlayerAdapter
}

class TestLegacyMediaPlayer <<TestDouble>> {
    ' Properties for test verification
    +PlayFileCalled: bool {readonly, get}
    +LastFileName: string? {readonly, get}
    
    ' Overridden method with test tracking
    +PlayFile(filePath: string): void {override}
    {post: PlayFileCalled = true && LastFileName = filePath}
}

' === SYSTEM DEPENDENCIES ===

class ArgumentNullException <<exception>> {
    +ArgumentNullException(paramName: string)
    +ArgumentNullException(message: string, paramName: string)
}

class ArgumentException <<exception>> {
    +ArgumentException(message: string)
    +ArgumentException(message: string, paramName: string)
}

class Console <<utility>> {
    +WriteLine(value: string): void {static}
}

' === RELATIONSHIPS WITH MULTIPLICITIES ===

' Interface realization
IMediaPlayer <|.. MediaPlayerAdapter : <<implements>>

' Composition with multiplicity
MediaPlayerAdapter "1" *-- "1" LegacyMediaPlayer : -_legacyPlayer

' Inheritance
LegacyMediaPlayer <|-- TestLegacyMediaPlayer : <<extends>>

' Test dependencies
MediaPlayerTests ..> MediaPlayerAdapter : <<tests>>
MediaPlayerTests "1" ..> "*" TestLegacyMediaPlayer : <<creates>>

' Exception throwing relationships
MediaPlayerAdapter ..> ArgumentNullException : <<throws>>
MediaPlayerAdapter ..> ArgumentException : <<throws>>

' System usage
LegacyMediaPlayer ..> Console : <<uses>>

' === DETAILED CONSTRAINTS ===

note right of MediaPlayerAdapter
    **Implementation Constraints:**
    
    **Class Invariants:**
    • _legacyPlayer != null (always)
    
    **Method Preconditions:**
    • Constructor: legacyPlayer != null
    • Play(): fileName != null && !IsNullOrWhiteSpace(fileName)
    
    **Method Postconditions:**
    • Play(): _legacyPlayer.PlayFile() called with fileName
    
    **Exception Behavior:**
    • ArgumentNullException: null parameters
    • ArgumentException: empty/whitespace strings
end note

note bottom of TestLegacyMediaPlayer
    **Test Double Behavior:**
    
    **State Tracking:**
    • PlayFileCalled: tracks method invocation
    • LastFileName: captures last parameter value
    
    **Verification Support:**
    • Enables assertion-based testing
    • Provides method call history
    • Supports behavior verification
end note

' === PACKAGE ORGANIZATION ===

package "Production Code" {
    IMediaPlayer
    MediaPlayerAdapter  
    LegacyMediaPlayer
}

package "Test Code" {
    MediaPlayerTests
    TestLegacyMediaPlayer
}

package "System Dependencies" {
    ArgumentNullException
    ArgumentException
    Console
}

@enduml